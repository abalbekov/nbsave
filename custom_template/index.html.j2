{# Custom nbconvert jinja2 template 
	
	Adds following elements when converting a notebook to html:
	
		- adds show/hide code button
		- adds show/hide output button
		- adds execute time to the bottom of each code cell
		- embeds images as base64 encoded string to make html file self-contained
		- enumerates markdown headers
		- if Table of Contents cell is present (generated by toc2 nbextention), then edit its achors REF to match enumerated headers
		
   Implementation details:
		Extends "classic" template.

		Execute time is taken from cell metadata where it is stored by ExecuteTime Jupyter extension.
		
		Table of Content cell is expected to be generated in notebook by toc2 nbextention.
		(I could not make toc2-own exporters and templates work with nbconvert v6)
		
		The template relies on several filters defined in "custom_exporter" package.
		Therefore when calling with nbcovert must specify both "--to custom_exporter.AddFilters" and "--template" 
   
   Usage example:
	  ! jupyter nbconvert mynotebook.ipynb \
		--to=custom_exporter.AddFilters \
		--template custom_template
	  
   To install: 1) copy template directory to <Python-dir>\share\jupyter\nbconvert\templates
			   2) make custom_exporter package available to Python (ex. in PYTHONPATH)
   
#}
 
{%- extends 'classic/index.html.j2' -%}


{# add javascript functions under header 
	This is to display two show/hide buttons in html output 
		Based on: 
			How to hide code from cells in ipython notebook visualized with nbviewer?
				https://stackoverflow.com/a/47017746
			A Jupyter NBConvert HTML template adding a toggle to hide/show each code cell.
				https://gist.github.com/QuentinAndre/75fb32f76720546550f672133969213e
			The templating system of nbconvert 6
				https://blog.jupyter.org/the-templating-system-of-nbconvert-6-47ea781eacd2
			Custom Templates for Jupyter Notebooks with Jinja2
				https://www.datacamp.com/community/tutorials/jinja2-custom-export-templates-jupyter
#}

{% block header %}
	{{ super() }}

    <script src="https://code.jquery.com/jquery-3.5.0.js"></script>
    <script>

		function code_toggle() {
			if (code_shown){
				$('div.input').hide('500');
				$('#toggleCodeButton').val('Show Code')
			} else {
				$('div.input').show('500');
				$('#toggleCodeButton').val('Hide Code')
			}
			code_shown = !code_shown
		}
	  
		function output_toggle() {
			if (output_shown){
				$('div.output').hide('500');
				$('div.executetime').hide('500');
				$('#toggleOutputButton').val('Show Output')
			} else {
				$('div.output').show('500');
				$('div.executetime').show('500');
				$('#toggleOutputButton').val('Hide Output')
			}
			output_shown = !output_shown
		}
    
		$( document ).ready(function(){
			// initially show code and show output cells
			code_shown=true;
			output_shown=true;
			//$('div.input').hide();
		});
    </script>
	
{% endblock header %}

{# add two buttons #}
{% block body_header %}
	{{ super() }}
	
	<div style="width: 80%; display: flex; position: fixed; z-index: 100; justify-content: flex-end;">
		<form action="javascript:code_toggle()" >
			<input type="submit" id="toggleCodeButton" value="Show Code">
		</form>
		<form action="javascript:output_toggle()" >
			<input type="submit" id="toggleOutputButton"  value="Hide Output">
		</form>
	</div>
{% endblock body_header %}


{#
 Below is to add execution timestamp
 Copied input rewrite rule from base.html.j2 and added timestamp div and filters
#}

{% block input %}
<div class="inner_cell">
    <div class="input_area">
	{{ cell.source | highlight_code(metadata=cell.metadata) }}
	{% if cell['metadata'].get('ExecuteTime', {}).get('start_time', '') %}
		<div class="executetime" style="border: none; border-top: 1px solid #cfcfcf; font-size: 80%;">
			{{ cell['metadata'].get('ExecuteTime', {}).get('start_time', '') | store_start_time }}
			{{ cell['metadata'].get('ExecuteTime', {}).get('end_time'  , '') | store_end_time }}
			executed in : {{ cell['metadata'].get('ExecuteTime', {}).get('start_time', '') | show_executed_in }}
			finished :    {{ cell['metadata'].get('ExecuteTime', {}).get('end_time'  , '') | show_finished_at }}
		</div>
	{% endif %}
    </div>
</div>
{% endblock input %}

{#
 Below is modified markdown rewrite rule from base.html.j2
 Added custom filters:
	number_headers : prepends markdown headers with numbered prefix.
	fix_toc2_href  : edits Table Of Content toc2-generated html anchor HREF's to match numbered markdown headers
	markdown_embed_img: inlines markdown images as base64 encoded data to make self-contained html document
 Custom filters are defined in custom_exporter.AddFilters exporter.
 The exporter is defined in custom_exporter package available via PYTHONPATH
#}

{% block markdowncell scoped %}
<div class="cell border-box-sizing text_cell rendered{{ celltags(cell) }}">
{%- if resources.global_content_filter.include_input_prompt-%}
    {{ self.empty_in_prompt() }}
{%- endif -%}
<div class="inner_cell">
<div class="text_cell_render border-box-sizing rendered_html">
{{ cell.source | number_headers | markdown2html | fix_toc2_href | markdown_embed_img | strip_files_prefix }}
</div>
</div>
</div>
{%- endblock markdowncell %}
